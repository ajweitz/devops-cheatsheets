# PersistentVolume are what is defined from the administration side, to connect volumes to some sort of storage implemantation.
# To assign volumes to a Pod, you would define a "PersistentVolumeClaim" that will bind to the PersistentVolume you created.
# There is a 1 to 1 relation between a PVC and PV, so if the storage defined here is bigger than what the Claim needs, it will simply be wasted.

# In actual environment, you wouldn't define a PV, but rather a StorageClass that will dynamically create PVs based on PVC

apiVersion: v1
kind: PersistentVolume
metadata:
  name: somepersistentvolume
spec:
  capacity:
    storage: "1Gi"
  # define what happens to the Persistent Volume once it gets detached from a PVC
  # Retain - remain untill manually deleted, will not be reused by other Claims
  # Delete - delete the PersistentVolume automatically
  # Recycle - delete the data in the PersistentVolume, but reuse it for other PVCs
  persistentVolumeReclaimPolicy: Retain 

  accessModes:
    - ReadWriteMany # this allows pods to read/write on volume from different nodes.
    # - ReadWriteOnce # this allows pods to read/write on a volume, but forces them to be on the same node as the volume.
    # - ReadOnlyMany # this will allow pods to only read data from volume.

  # below you would define the actual store, based on the provider. You can even define to store the data on the nodes themselves.  
  awsElasticBlockStore:
    volumeID: someawsvolumeid
    fsType: ext4

